#!/bin/bash

set -e

RUN_AS="server"
CORES=2
THREAD="false"
RAM=1024
kernel_path=""
rootfs_path=""
tap_ctr=$((0))
TAP_DEV=""
SOCKET="/tmp/firecracker0.socket"
FIRECRACKER="firecracker"

make_tap() {
	TAPS=$(ip a | grep tap | awk '{ print $2; }' | sed 's/://g')
	for t in $TAPS; do
		tap="tap$tap_ctr"
		if [[ $tap == $t ]]; then
			tap_ctr=$((tap_ctr+1))
		else
			break
		fi
	done
	sudo ip tuntap add dev "tap$tap_ctr" mode tap
	sudo ip link set dev "tap$tap_ctr" up
	sudo ip link set "tap$tap_ctr" master br0
}

while [ ! -z "$1" ]
do
	case "$1" in
		-c|--client)
			RUN_AS="client"
			;;
		-j|--cores)
			CORES="$2"
			shift
			;;
		-t|--thread)
			THREAD="true"
			;;
		-m|--ram)
			RAM=$((1024*$2))
			shift
			;;
		-k|--kernel)
			kernel_path=$2
			shift
			;;
		-r|--root)
			rootfs_path=$2
			shift
			;;
		-int|--interactive)
			INTERACTIVE="yes"
			;;
		-i|--initramfs)
			INITRAMFS=$2
			shift
			;;
		-n|--network)
			#TAP_DEV="tap"
			#TAP_DEV+=$2
			make_tap
			TAP_DEV="tap$tap_ctr"
			;;
		-s|--socket)
			SOCKET="/tmp/firecracker$2.socket"
			shift
			;;
		*)
			if [[ "$kernel_path" == "" ]]; then
				kernel_path=$1
			else
				rootfs_path=$1
			fi
			;;
	esac
	shift
done

if [[ "$RUN_AS" == "server" ]]; then
	for i in {0..10}; do
		if [[ ! -e /tmp/firecracker$i.socket ]]; then
			rm -rf /tmp/firecracker$i.socket
			echo -e "Socket: /tmp/firecracker$i.socket"
			$FIRECRACKER --api-sock /tmp/firecracker$i.socket
			rm -rf /tmp/firecracker$i.socket
			exit 0
		fi
	done
fi

if [[ "$RUN_AS" == "client" ]]; then
	K_STR="{ \"kernel_image_path\": \"${kernel_path}\""
	if [[ "$INTERACTIVE" == "yes" ]]; then
		K_STR+=",\"boot_args\": \"console=ttyS0 reboot=k panic=1\""
	fi
	if [[ -n "$INITRAMFS" ]]; then
		K_STR+=",\"initrd_path\": \"${INITRAMFS}\""
	fi
	K_STR+=" }"

	if [[ -n "$TAP_DEV" ]]; then
		E=$(printf '%02X' $tap_ctr)
		echo $E
		IPADD=$(ip a show br0 | grep "inet " | awk '{ print $2; }' | sed 's/\/.*$//g' | sed "s/\.[^.]*$//")
		IPADD=$(printf '%02X:' ${IPADD//./ })
		IPADD+=$E
		echo $IPADD
  		curl --unix-socket $SOCKET -i     \
	 	-X PUT 'http://localhost/network-interfaces/eth0' \
		-H 'Accept: application/json'                     \
		-H 'Content-Type: application/json'               \
		-d "{
			\"iface_id\": \"eth0\",
			\"guest_mac\": \"AA:BB:$IPADD\",
			\"host_dev_name\": \""$TAP_DEV"\"
		}"
	fi
	
	curl --unix-socket $SOCKET -i \
		-X PUT 'http://localhost/boot-source'     \
		-H 'Accept: application/json'             \
		-H 'Content-Type: application/json'       \
		-d "$K_STR"

	curl --unix-socket $SOCKET -i \
		-X PUT 'http://localhost/drives/rootfs'   \
		-H 'Accept: application/json'             \
		-H 'Content-Type: application/json'       \
		-d "{
			\"drive_id\": \"rootfs\",
			\"path_on_host\": \"${rootfs_path}\",
			\"is_root_device\": true,
			\"is_read_only\": false
		}"

	curl --unix-socket $SOCKET -i  \
		-X PUT 'http://localhost/machine-config'   \
		-H 'Accept: application/json'              \
		-H 'Content-Type: application/json'        \
		-d "{
			\"vcpu_count\": $CORES,
			\"mem_size_mib\": $RAM,
			\"ht_enabled\": $THREAD
		}"

	curl --unix-socket $SOCKET -i \
		-X PUT 'http://localhost/actions'         \
		-H  'Accept: application/json'            \
		-H  'Content-Type: application/json'      \
		-d "{
			\"action_type\": \"InstanceStart\"
		}"
fi
